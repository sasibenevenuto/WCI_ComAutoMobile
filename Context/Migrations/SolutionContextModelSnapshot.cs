// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Context.Migrations
{
    [DbContext(typeof(SolutionContext))]
    partial class SolutionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Model.Models.Companies.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Model.Models.Companies.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressComplement")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CNAE")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FantasyName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MunicipalityRegistration")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StateRegistration")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StateRegistrationReplaceTributary")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TradingName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Model.Models.Companies.CompanyConfigNFe", b =>
                {
                    b.Property<int>("CompanyConfigNFeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentNumberNfe")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("EnvironmentNFE")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VersionNfe")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompanyConfigNFeId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("CompanyConfigNFe");
                });

            modelBuilder.Entity("Model.Models.Companies.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Model.Models.Customers.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int?>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Model.Models.Customers.CustomerAddress", b =>
                {
                    b.Property<long>("CustomerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressComplement")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerAddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("Model.Models.General.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Model.Models.General.PersonalInformation", b =>
                {
                    b.Property<int>("PersonalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressComplement")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndividualResistration")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int?>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PersonalInformationId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Personal_Information");
                });

            modelBuilder.Entity("Model.Models.General.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FederativeUnit")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("StateId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Model.Models.Identity.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeFunctionClaim")
                        .HasColumnType("int");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("ClaimId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("Model.Models.Identity.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Model.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Model.Models.Identity.Users_x_Claims", b =>
                {
                    b.Property<int>("Users_x_ClaimsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifieldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserIDCreate")
                        .HasColumnType("int");

                    b.Property<int>("UserIDLastUpdate")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Users_x_ClaimsId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserIDCreate");

                    b.HasIndex("UserIDLastUpdate");

                    b.HasIndex("UserId");

                    b.ToTable("Users_x_Claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Models.Companies.Account", b =>
                {
                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.Companies.Company", b =>
                {
                    b.HasOne("Model.Models.Companies.Account", "Account")
                        .WithMany("Companies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.Companies.CompanyConfigNFe", b =>
                {
                    b.HasOne("Model.Models.Companies.Company", "Company")
                        .WithOne("CompanyConfigNFe")
                        .HasForeignKey("Model.Models.Companies.CompanyConfigNFe", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.Companies.Employee", b =>
                {
                    b.HasOne("Model.Models.Companies.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.Customers.Customer", b =>
                {
                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.Customers.CustomerAddress", b =>
                {
                    b.HasOne("Model.Models.General.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.General.City", b =>
                {
                    b.HasOne("Model.Models.General.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Model.Models.General.PersonalInformation", b =>
                {
                    b.HasOne("Model.Models.General.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.General.State", b =>
                {
                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.Identity.Claim", b =>
                {
                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInformationUpdate");

                    b.Navigation("PersonalInformationUser");
                });

            modelBuilder.Entity("Model.Models.Identity.Profile", b =>
                {
                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationCreate")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInformationCreate");

                    b.Navigation("PersonalInformationUpdate");
                });

            modelBuilder.Entity("Model.Models.Identity.User", b =>
                {
                    b.HasOne("Model.Models.Identity.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Model.Models.Identity.Users_x_Claims", b =>
                {
                    b.HasOne("Model.Models.Identity.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserIDCreate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.General.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Claim");

                    b.Navigation("PersonalInformationUpdate");

                    b.Navigation("PersonalInformationUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.Companies.Account", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Model.Models.Companies.Company", b =>
                {
                    b.Navigation("CompanyConfigNFe");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Model.Models.General.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
